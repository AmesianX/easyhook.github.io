<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>LocalHook Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="LocalHook class" /><meta name="System.Keywords" content="EasyHook.LocalHook class" /><meta name="System.Keywords" content="LocalHook class, about LocalHook class" /><meta name="Microsoft.Help.F1" content="EasyHook.LocalHook" /><meta name="Microsoft.Help.Id" content="T:EasyHook.LocalHook" /><meta name="Description" content="This class will provide various static members to be used with local hooking and is also the instance class of a hook." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="EasyHook" /><meta name="file" content="T_EasyHook_LocalHook" /><meta name="guid" content="T_EasyHook_LocalHook" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">EasyHook 2.7<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_EasyHook.htm" title="EasyHook 2.7" tocid="roottoc">EasyHook 2.7</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_EasyHook.htm" title="EasyHook" tocid="N_EasyHook">EasyHook</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_EasyHook_LocalHook.htm" title="LocalHook Class" tocid="T_EasyHook_LocalHook">LocalHook Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Properties_T_EasyHook_LocalHook.htm" title="LocalHook Properties" tocid="Properties_T_EasyHook_LocalHook">LocalHook Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_EasyHook_LocalHook.htm" title="LocalHook Methods" tocid="Methods_T_EasyHook_LocalHook">LocalHook Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>LocalHook Class</h1></td></tr></table><span class="introStyle"></span>
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- EasyHookLeaderBoard728x90 -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-7073730100723702" data-ad-slot="9421789924"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
 <div class="summary">
            This class will provide various static members to be used with local hooking and
            is also the instance class of a hook.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LSTB5B3AEDB_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB5B3AEDB_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <a href="http://msdn2.microsoft.com/en-us/library/9tcc8a46" target="_blank">System.Runtime.ConstrainedExecution<span id="LSTB5B3AEDB_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB5B3AEDB_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>CriticalFinalizerObject</a><br />    <span class="selflink">EasyHook<span id="LSTB5B3AEDB_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB5B3AEDB_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>LocalHook</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_EasyHook.htm">EasyHook</a><br />
    <strong>Assembly:</strong>
   EasyHook (in EasyHook.dll) Version: 2.7.6684.0 (2.7.6684.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','cs','1','4');return false;">C#</a></div><div id="ID1EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','vb','2','4');return false;">VB</a></div><div id="ID1EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','cpp','3','4');return false;">C++</a></div><div id="ID1EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EDCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">LocalHook</span> : <span class="identifier">CriticalFinalizerObject</span>, <span class="identifier">IDisposable</span></pre></div><div id="ID1EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">LocalHook</span>
	<span class="keyword">Inherits</span> <span class="identifier">CriticalFinalizerObject</span>
	<span class="keyword">Implements</span> <span class="identifier">IDisposable</span></pre></div><div id="ID1EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">LocalHook</span> : <span class="keyword">public</span> <span class="identifier">CriticalFinalizerObject</span>, 
	<span class="identifier">IDisposable</span></pre></div><div id="ID1EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">LocalHook</span> =  
    <span class="keyword">class</span>
        <span class="keyword">inherit</span> <span class="identifier">CriticalFinalizerObject</span>
        <span class="keyword">interface</span> <span class="identifier">IDisposable</span>
    <span class="keyword">end</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EDCA");</script></div><p>The <span class="selflink">LocalHook</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_EasyHook_LocalHook_Callback.htm">Callback</a></td><td><div class="summary">
            The callback passed to <a href="M_EasyHook_LocalHook_Create.htm">Create(IntPtr, Delegate, Object)</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="P_EasyHook_LocalHook_GlobalThreadACL.htm">GlobalThreadACL</a></td><td><div class="summary">
            Returns the gloabl thread ACL associated with ALL hooks. Refer to <a href="M_EasyHook_LocalHook_IsThreadIntercepted.htm">IsThreadIntercepted(Int32)</a>
            for more information about access negotiation.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_EasyHook_LocalHook_HookBypassAddress.htm">HookBypassAddress</a></td><td><div class="summary">
            Returns the trampoline bypass address associated with this hook.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_EasyHook_LocalHook_ThreadACL.htm">ThreadACL</a></td><td><div class="summary">
            Returns the thread ACL associated with this hook. Refer to <a href="M_EasyHook_LocalHook_IsThreadIntercepted.htm">IsThreadIntercepted(Int32)</a>
            for more information about access negotiation.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_EasyHook_LocalHook_Create.htm">Create</a></td><td><div class="summary">
            Installs a managed hook. After this you'll have to activate it by setting a proper <a href="P_EasyHook_LocalHook_ThreadACL.htm">ThreadACL</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_EasyHook_LocalHook_CreateUnmanaged.htm">CreateUnmanaged</a></td><td><div class="summary">
            Installs an unmanaged hook. After this you'll have to activate it by setting a proper <a href="P_EasyHook_LocalHook_ThreadACL.htm">ThreadACL</a>.
            <a href="T_EasyHook_HookRuntimeInfo.htm">HookRuntimeInfo</a> WON'T be supported! Refer to the native "LhBarrierXxx" APIs to
            access unmanaged hook runtime information.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_EasyHook_LocalHook_Dispose.htm">Dispose</a></td><td><div class="summary">
            If you want to immediately uninstall a hook, the only way is to dispose it. A disposed
            hook is guaranteed to never invoke your handler again but may still consume
            memory even for process life-time! 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_EasyHook_LocalHook_EnableRIPRelocation.htm">EnableRIPRelocation</a></td><td><div class="summary">
            RIP relocation is disabled by default. If you want to enable it,
            just call this method which will attach a debugger to the current
            process. There may be circumstances under which this might fail
            and this is why it is not done by default. On 32-Bit system this
            method will always succeed and do nothing...
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/bsc2ak47" target="_blank">Equals</a></td><td><div class="summary">Determines whether the specified <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a> is equal to the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_EasyHook_LocalHook_Finalize.htm">Finalize</a></td><td><div class="summary">
            Ensures that each instance is always terminated with <a href="M_EasyHook_LocalHook_Dispose.htm">Dispose<span id="LSTB5B3AEDB_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB5B3AEDB_3?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.
            </div> (Overrides <a href="http://msdn2.microsoft.com/en-us/library/1tfw4dbf" target="_blank">CriticalFinalizerObject<span id="LSTB5B3AEDB_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB5B3AEDB_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Finalize<span id="LSTB5B3AEDB_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB5B3AEDB_5?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/zdee4b3y" target="_blank">GetHashCode</a></td><td><div class="summary">Serves as a hash function for a particular type. </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_EasyHook_LocalHook_GetNameByHandle.htm">GetNameByHandle</a></td><td><div class="summary">
            Reads the kernel object name for a given windows usermode handle.
            Executes in approx. 100 micro secounds.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_EasyHook_LocalHook_GetProcAddress.htm">GetProcAddress</a></td><td><div class="summary">
            Will return the address for a given DLL export symbol. The specified
            module has to be loaded into the current process space and also export
            the given method.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_EasyHook_LocalHook_GetProcDelegate__1.htm">GetProcDelegate<span id="LSTB5B3AEDB_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB5B3AEDB_6?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TDelegate<span id="LSTB5B3AEDB_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB5B3AEDB_7?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script></a></td><td><div class="summary">
            Will return a delegate for a given DLL export symbol. The specified
            module has to be loaded into the current process space and also export
            the given method.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_EasyHook_LocalHook_GetProcessIdByHandle.htm">GetProcessIdByHandle</a></td><td><div class="summary">
            Tries to get the underlying process ID for a given handle.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_EasyHook_LocalHook_GetThreadIdByHandle.htm">GetThreadIdByHandle</a></td><td><div class="summary">
            Tries to get the underlying thread ID for a given handle.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/dfwy45w9" target="_blank">GetType</a></td><td><div class="summary">Gets the <a href="http://msdn2.microsoft.com/en-us/library/42892f65" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_EasyHook_LocalHook_IsThreadIntercepted.htm">IsThreadIntercepted</a></td><td><div class="summary">
            Checks whether a given thread ID will be intercepted by the underlying hook.
            </div></td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/57ctke0a" target="_blank">MemberwiseClone</a></td><td><div class="summary">Creates a shallow copy of the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_EasyHook_LocalHook_Release.htm">Release</a></td><td><div class="summary">
            Processes any pending hook removals. Warning! This method can be quite slow (1 second) under certain circumstances.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/7bxwbwt2" target="_blank">ToString</a></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID5RBSection" class="collapsibleSection">
  The following demonstrates how to use <span class="selflink">LocalHook</span>:
  <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> System.Threading;
<span class="highlight-keyword">using</span> System.Runtime.InteropServices;
<span class="highlight-keyword">using</span> EasyHook;

<span class="highlight-keyword">namespace</span> FileMonInject
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Main : EasyHook.IEntryPoint
    {
        FileMon.FileMonInterface Interface;
        LocalHook CreateFileHook;
        Stack&lt;String&gt; Queue = <span class="highlight-keyword">new</span> Stack&lt;String&gt; ();

        <span class="highlight-keyword">public</span> Main(
            RemoteHooking.IContext InContext,
            String InChannelName)
        {
            <span class="highlight-comment">// connect to host...</span>
            Interface = RemoteHooking.IpcConnectClient&lt;FileMon.FileMonInterface&gt;(InChannelName);

            <span class="highlight-comment">// validate connection...</span>
            Interface.Ping();
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Run(
            RemoteHooking.IContext InContext,
            String InChannelName)
        {
            <span class="highlight-comment">// install hook...</span>
            <span class="highlight-keyword">try</span>
            {
                CreateFileHook = LocalHook.Create(
                    LocalHook.GetProcAddress(<span class="highlight-literal">"kernel32.dll"</span>, <span class="highlight-literal">"CreateFileW"</span>),
                    <span class="highlight-keyword">new</span> DCreateFile(CreateFile_Hooked),
                    <span class="highlight-keyword">this</span>);

                CreateFileHook.ThreadACL.SetExclusiveACL(<span class="highlight-keyword">new</span> Int32[] { <span class="highlight-number">0</span> });
            }
            <span class="highlight-keyword">catch</span> (Exception ExtInfo)
            {
                Interface.ReportException(ExtInfo);

                <span class="highlight-keyword">return</span>;
            }

            Interface.IsInstalled(RemoteHooking.GetCurrentProcessId());

            RemoteHooking.WakeUpProcess();

            <span class="highlight-comment">// wait for host process termination...</span>
            <span class="highlight-keyword">try</span>
            {
                <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>)
                {
                    Thread.Sleep(<span class="highlight-number">500</span>);

                    <span class="highlight-comment">// transmit newly monitored file accesses...</span>
                    <span class="highlight-keyword">if</span> (Queue.Count &gt; <span class="highlight-number">0</span>)
                    {
                        String[] Package = <span class="highlight-keyword">null</span>;

                        <span class="highlight-keyword">lock</span> (Queue)
                        {
                            Package = Queue.ToArray();

                            Queue.Clear();
                        }

                        Interface.OnCreateFile(RemoteHooking.GetCurrentProcessId(), Package);
                    }
                    <span class="highlight-keyword">else</span>
                        Interface.Ping();
                }
            }
            <span class="highlight-keyword">catch</span>
            {
                <span class="highlight-comment">// Ping() will raise an exception if host is unreachable</span>
            }
        }

        [UnmanagedFunctionPointer(CallingConvention.StdCall,
            CharSet = CharSet.Unicode,
            SetLastError = <span class="highlight-keyword">true</span>)]
        <span class="highlight-keyword">delegate</span> IntPtr DCreateFile(
            String InFileName,
            UInt32 InDesiredAccess,
            UInt32 InShareMode,
            IntPtr InSecurityAttributes,
            UInt32 InCreationDisposition,
            UInt32 InFlagsAndAttributes,
            IntPtr InTemplateFile);

        <span class="highlight-comment">// just use a P-Invoke implementation to get native API access from C# (this step is not necessary for C++.NET)</span>
        [DllImport(<span class="highlight-literal">"kernel32.dll"</span>,
            CharSet = CharSet.Unicode,
            SetLastError = <span class="highlight-keyword">true</span>,
            CallingConvention = CallingConvention.StdCall)]
        <span class="highlight-keyword">static</span> <span class="highlight-keyword">extern</span> IntPtr CreateFile(
            String InFileName,
            UInt32 InDesiredAccess,
            UInt32 InShareMode,
            IntPtr InSecurityAttributes,
            UInt32 InCreationDisposition,
            UInt32 InFlagsAndAttributes,
            IntPtr InTemplateFile);

        <span class="highlight-comment">// this is where we are intercepting all file accesses!</span>
        <span class="highlight-keyword">static</span> IntPtr CreateFile_Hooked(
            String InFileName,
            UInt32 InDesiredAccess,
            UInt32 InShareMode,
            IntPtr InSecurityAttributes,
            UInt32 InCreationDisposition,
            UInt32 InFlagsAndAttributes,
            IntPtr InTemplateFile)
        {

            <span class="highlight-keyword">try</span>
            {
                Main This = (Main)HookRuntimeInfo.Callback;

                <span class="highlight-keyword">lock</span> (This.Queue)
                {
                    This.Queue.Push(<span class="highlight-literal">"["</span> + RemoteHooking.GetCurrentProcessId() + <span class="highlight-literal">":"</span> + 
                        RemoteHooking.GetCurrentThreadId() +  <span class="highlight-literal">"]: \""</span> + InFileName + <span class="highlight-literal">"\""</span>);
                }
            }
            <span class="highlight-keyword">catch</span>
            {
            }

            <span class="highlight-comment">// call original API...</span>
            <span class="highlight-keyword">return</span> CreateFile(
                InFileName,
                InDesiredAccess,
                InShareMode,
                InSecurityAttributes,
                InCreationDisposition,
                InFlagsAndAttributes,
                InTemplateFile);
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID6RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_EasyHook.htm">EasyHook Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Documentation built 2018-06-07.<p><a href="https://easyhook.github.io/" target="_blank">Copyright (C) 2009 Christoph Husse &amp; (C) 2012-2017 Justin Stenning</a></p>
<script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
  var pageTracker = _gat._getTracker("UA-66127710-1");
  pageTracker._trackPageview();
} catch(err) {}
</script> </div></body></html>